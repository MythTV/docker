--- /usr/lib/python2.7/site-packages/trac/db/mysql_backend.py	2017-06-21 03:43:39.000000000 +0100
+++ mysql_backend.py	2018-05-08 14:47:32.077862101 +0100
@@ -17,7 +17,6 @@
 import os
 import re
 import sys
-import types
 
 from genshi.core import Markup
 
@@ -34,17 +33,20 @@
 
 _like_escape_re = re.compile(r'([/_%])')
 
+has_pymysql = False
+pymsql_version = None
+
 try:
-    import MySQLdb
-    import MySQLdb.cursors
+    import pymysql
 except ImportError:
-    has_mysqldb = False
-    mysqldb_version = None
+    pass
 else:
-    has_mysqldb = True
-    mysqldb_version = get_pkginfo(MySQLdb).get('version', MySQLdb.__version__)
+    has_pymysql = True
+
+if has_pymysql:
+    pymsql_version = get_pkginfo(pymysql).get('version', pymysql.__version__)
 
-    class MySQLUnicodeCursor(MySQLdb.cursors.Cursor):
+    class MySQLUnicodeCursor(pymysql.cursors.Cursor):
         def _convert_row(self, row):
             return tuple(v.decode('utf-8') if isinstance(v, str) else v
                          for v in row)
@@ -63,6 +65,11 @@
             return [self._convert_row(row) for row in rows] \
                    if rows is not None else []
 
+    class MySQLSilentCursor(MySQLUnicodeCursor):
+        def _show_warnings(self, conn=None):
+            pass
+
+
 # Mapping from "abstract" SQL types to DB-specific types
 _type_map = {
     'int64': 'bigint',
@@ -96,20 +103,25 @@
         """Location of mysqldump for MySQL database backups""")
 
     def __init__(self):
-        self._mysql_version = None
+        if has_pymysql:
+            self._mysql_version = \
+                'server: (not-connected), client: "%s", thread-safe: %s' % \
+                (pymysql.get_client_info(), pymysql.thread_safe())
+        else:
+            self._mysql_version = None
         self.error = None
 
     # ISystemInfoProvider methods
 
     def get_system_info(self):
-        if self.required:
+        if has_pymysql:
             yield 'MySQL', self._mysql_version
-            yield 'MySQLdb', mysqldb_version
+            yield pymysql.__name__, pymsql_version
 
     # IDatabaseConnector methods
 
     def get_supported_schemes(self):
-        if not has_mysqldb:
+        if not has_pymysql:
             self.error = _("Cannot load Python bindings for MySQL")
         yield ('mysql', -1 if self.error else 1)
 
@@ -119,13 +131,13 @@
         if not self.required:
             self._mysql_version = \
                 'server: "%s", client: "%s", thread-safe: %s' \
-                % (cnx.cnx.get_server_info(), MySQLdb.get_client_info(),
-                   MySQLdb.thread_safe())
+                % (cnx.cnx.get_server_info(), pymysql.get_client_info(),
+                   pymysql.thread_safe())
             self.required = True
         return cnx
 
     def get_exceptions(self):
-        return MySQLdb
+        return pymysql
 
     def init_db(self, path, schema=None, log=None, user=None, password=None,
                 host=None, port=None, params={}):
@@ -371,7 +383,7 @@
             password = ''
         if port is None:
             port = 3306
-        opts = {}
+        opts = {'charset': 'utf8'}
         for name, value in params.iteritems():
             key = name.encode('utf-8')
             if name == 'read_default_group':
@@ -382,22 +394,32 @@
                 opts[key] = value.encode(sys.getfilesystemencoding())
             elif name in ('compress', 'named_pipe'):
                 opts[key] = as_int(value, 0)
+            elif name == 'charset':
+                value = value.lower()
+                if value in ('utf8', 'utf8mb4'):
+                    opts[key] = value
+                else:
+                    self.log.warning("Invalid connection string parameter "
+                                     "'%s=%s'", name, value)
             else:
                 self.log.warning("Invalid connection string parameter '%s'",
                                  name)
-        cnx = MySQLdb.connect(db=path, user=user, passwd=password, host=host,
-                              port=port, charset='utf8', **opts)
-        self.schema = path
-        if hasattr(cnx, 'encoders'):
-            # 'encoders' undocumented but present since 1.2.1 (r422)
-            cnx.encoders[Markup] = cnx.encoders[types.UnicodeType]
+        cnx = pymysql.connect(db=path, user=user, passwd=password, host=host,
+                              port=port, **opts)
         cursor = cnx.cursor()
         cursor.execute("SHOW VARIABLES WHERE "
                        " variable_name='character_set_database'")
         self.charset = cursor.fetchone()[1]
-        if self.charset != 'utf8':
-            cnx.query("SET NAMES %s" % self.charset)
-            cnx.store_result()
+        cursor.close()
+        if self.charset != opts['charset']:
+            cnx.close()
+            opts['charset'] = self.charset
+            cnx = pymysql.connect(db=path, user=user, passwd=password,
+                                  host=host, port=port, **opts)
+        self.schema = path
+        if hasattr(cnx, 'encoders'):
+            # 'encoders' undocumented but present since 1.2.1 (r422)
+            cnx.encoders[Markup] = cnx.encoders[unicode]
         ConnectionWrapper.__init__(self, cnx, log)
         self._is_closed = False
 
@@ -408,14 +430,14 @@
         self.cnx.ping()
         try:
             self.cnx.rollback()
-        except MySQLdb.ProgrammingError:
+        except pymysql.ProgrammingError:
             self._is_closed = True
 
     def close(self):
         if not self._is_closed:
             try:
                 self.cnx.close()
-            except MySQLdb.ProgrammingError:
+            except pymysql.ProgrammingError:
                 pass # this error would mean it's already closed.  So, ignore
             self._is_closed = True
 
@@ -430,7 +452,7 @@
         return 'concat(%s)' % ', '.join(args)
 
     def drop_column(self, table, column):
-        cursor = MySQLdb.cursors.Cursor(self.cnx)
+        cursor = pymysql.cursors.Cursor(self.cnx)
         if column in self.get_column_names(table):
             quoted_table = self.quote(table)
             cursor.execute("SHOW INDEX FROM %s" % quoted_table)
@@ -452,8 +474,7 @@
                            (quoted_table, self.quote(column)))
 
     def drop_table(self, table):
-        cursor = MySQLdb.cursors.Cursor(self.cnx)
-        cursor._defer_warnings = True  # ignore "Warning: Unknown table ..."
+        cursor = MySQLSilentCursor(self.cnx)
         cursor.execute("DROP TABLE IF EXISTS " + self.quote(table))
 
     def get_column_names(self, table):
